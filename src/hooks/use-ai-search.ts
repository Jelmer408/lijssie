import { useState } from 'react';
import { createClient } from '@supabase/supabase-js';
import { SupermarketOffer } from '@/types/supabase';

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL!,
  import.meta.env.VITE_SUPABASE_ANON_KEY!
);

interface UseAiSearchReturn {
  isLoading: boolean;
  error: string | null;
  directMatches: SupermarketOffer[];
  semanticMatches: SupermarketOffer[];
  searchOffers: (query: string) => Promise<void>;
}

interface MatchResult extends SupermarketOffer {
  is_direct_match: boolean;
}

export function useAiSearch(): UseAiSearchReturn {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [directMatches, setDirectMatches] = useState<SupermarketOffer[]>([]);
  const [semanticMatches, setSemanticMatches] = useState<SupermarketOffer[]>([]);

  const searchOffers = async (query: string) => {
    try {
      setIsLoading(true);
      setError(null);

      const { data, error: searchError } = await supabase
        .rpc('match_sale_offers', {
          query_embedding: [], // This will be generated by the Supabase function
          match_threshold: 0.7,
          match_count: 20,
          query_text: query
        });

      if (searchError) throw searchError;

      // Split results into direct and semantic matches
      const matches = (data || []) as MatchResult[];
      setDirectMatches(matches.filter(match => match.is_direct_match));
      setSemanticMatches(matches.filter(match => !match.is_direct_match));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while searching');
      setDirectMatches([]);
      setSemanticMatches([]);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isLoading,
    error,
    directMatches,
    semanticMatches,
    searchOffers
  };
} 